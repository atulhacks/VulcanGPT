name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r Vulcan-GPT/ -f json -o bandit-report.json
          bandit -r Vulcan-GPT/ -f txt

      - name: Check dependencies for known vulnerabilities
        run: |
          safety check --file Vulcan-GPT/requirements.txt

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Vulcan-GPT/requirements.txt

      - name: Test module imports
        env:
          PYTHONIOENCODING: utf-8
        run: |
          python -c "
          import sys
          sys.path.append('Vulcan-GPT')
          
          # Test main module import
          try:
              import VulcanGPT
              print('[PASS] VulcanGPT module imports successfully')
          except Exception as e:
              print(f'[FAIL] VulcanGPT import failed: {e}')
              sys.exit(1)
          
          # Test local models import
          try:
              import local_models
              print('[PASS] local_models module imports successfully')
          except Exception as e:
              print(f'[FAIL] local_models import failed: {e}')
              sys.exit(1)
          
          print('[PASS] All import tests passed')
          "

      - name: Test configuration loading
        env:
          PYTHONIOENCODING: utf-8
        run: |
          python -c "
          import sys
          sys.path.append('Vulcan-GPT')
          import VulcanGPT
          
          # Test Config class
          try:
              config = VulcanGPT.Config()
              print('[PASS] Config class instantiated successfully')
              print(f'Base URL: {config.BASE_URL}')
              print(f'Model Name: {config.MODEL_NAME}')
          except Exception as e:
              print(f'[FAIL] Config test failed: {e}')
              sys.exit(1)
          "

      - name: Test UI components
        env:
          PYTHONIOENCODING: utf-8
        run: |
          python -c "
          import sys
          sys.path.append('Vulcan-GPT')
          import VulcanGPT
          
          # Test UI class
          try:
              ui = VulcanGPT.UI()
              print('[PASS] UI class instantiated successfully')
          except Exception as e:
              print(f'[FAIL] UI test failed: {e}')
              sys.exit(1)
          "

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip-audit
        run: |
          pip install pip-audit

      - name: Audit dependencies
        run: |
          pip-audit --requirement Vulcan-GPT/requirements.txt --format=json --output=audit-report.json || true
          pip-audit --requirement Vulcan-GPT/requirements.txt

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit
          path: audit-report.json

  build-test:
    name: Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          pip install pyinstaller

      - name: Install project dependencies
        run: |
          pip install -r Vulcan-GPT/requirements.txt

      - name: Test build (Windows)
        if: matrix.os == 'windows-latest'
        env:
          PYTHONIOENCODING: utf-8
        run: |
          cd Vulcan-GPT
          pyinstaller --onefile --name VulcanGPT --add-data "prompts;prompts" --console VulcanGPT.py

      - name: Test build (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd Vulcan-GPT
          pyinstaller --onefile --name VulcanGPT --add-data "prompts:prompts" VulcanGPT.py

      - name: Test executable
        env:
          PYTHONIOENCODING: utf-8
        run: |
          cd Vulcan-GPT/dist
          if [ -f "VulcanGPT" ] || [ -f "VulcanGPT.exe" ]; then
            echo "Executable created successfully"
            ls -la
          else
            echo "Executable not found"
            exit 1
          fi

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          if [ ! -f README.md ]; then
            echo "[FAIL] README.md not found"
            exit 1
          fi
          echo "[PASS] README.md found"

      - name: Check LICENSE exists
        run: |
          if [ ! -f Vulcan-GPT/LICENSE.txt ]; then
            echo "[FAIL] LICENSE.txt not found"
            exit 1
          fi
          echo "[PASS] LICENSE.txt found"

      - name: Check requirements.txt exists
        run: |
          if [ ! -f Vulcan-GPT/requirements.txt ]; then
            echo "[FAIL] requirements.txt not found"
            exit 1
          fi
          echo "[PASS] requirements.txt found"

      - name: Validate requirements.txt
        run: |
          python -m pip install --dry-run -r Vulcan-GPT/requirements.txt
          echo "[PASS] requirements.txt is valid"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r Vulcan-GPT/requirements.txt
          pip install memory-profiler

      - name: Memory usage test
        env:
          PYTHONIOENCODING: utf-8
        run: |
          python -c "
          import sys
          sys.path.append('Vulcan-GPT')
          import psutil
          import os
          
          # Get initial memory usage
          process = psutil.Process(os.getpid())
          initial_memory = process.memory_info().rss / 1024 / 1024  # MB
          
          # Import modules
          import VulcanGPT
          import local_models
          
          # Get memory after imports
          final_memory = process.memory_info().rss / 1024 / 1024  # MB
          memory_increase = final_memory - initial_memory
          
          print(f'Initial memory: {initial_memory:.2f} MB')
          print(f'Final memory: {final_memory:.2f} MB')
          print(f'Memory increase: {memory_increase:.2f} MB')
          
          if memory_increase > 100:  # More than 100MB increase
              print('[WARN] High memory usage detected')
          else:
              print('[PASS] Memory usage is acceptable')
          "

  status-check:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [security-check, test, dependency-check, build-test, documentation-check, performance-check]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Security Check: ${{ needs.security-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Documentation Check: ${{ needs.documentation-check.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"
          
          if [[ "${{ needs.security-check.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.dependency-check.result }}" == "failure" || 
                "${{ needs.build-test.result }}" == "failure" || 
                "${{ needs.documentation-check.result }}" == "failure" || 
                "${{ needs.performance-check.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ All CI checks passed"
          fi
