name: 🧪 Build Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  test-build:
    name: 🔨 Test Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Vulcan-GPT/requirements.txt
          pip install pyinstaller

      - name: 🔧 Prepare Build Environment
        run: |
          # Create icon file for Windows if it doesn't exist
          if [ "${{ matrix.os }}" = "windows-latest" ] && [ ! -f "Vulcan-GPT/img/logo.ico" ]; then
            echo "Creating placeholder icon..."
            mkdir -p Vulcan-GPT/img
            touch Vulcan-GPT/img/logo.ico
          fi
        shell: bash

      - name: 🏗️ Test Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --name="VulcanGPT-Test" --icon="Vulcan-GPT/img/logo.ico" --add-data "Vulcan-GPT/prompts;prompts" --add-data "Vulcan-GPT/img;img" --hidden-import="llama_cpp" --hidden-import="cryptography" --hidden-import="requests" --hidden-import="openai" --hidden-import="rich" --hidden-import="colorama" --hidden-import="pwinput" --hidden-import="python-dotenv" Vulcan-GPT/VulcanGPT.py

      - name: 🏗️ Test Build (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile --name="VulcanGPT-Test" --add-data "Vulcan-GPT/prompts:prompts" --add-data "Vulcan-GPT/img:img" --hidden-import="llama_cpp" --hidden-import="cryptography" --hidden-import="requests" --hidden-import="openai" --hidden-import="rich" --hidden-import="colorama" --hidden-import="pwinput" --hidden-import="python-dotenv" Vulcan-GPT/VulcanGPT.py

      - name: 📝 Verify Build
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            EXECUTABLE="dist/VulcanGPT-Test.exe"
          else
            EXECUTABLE="dist/VulcanGPT-Test"
          fi
          
          if [ -f "$EXECUTABLE" ]; then
            echo "✅ Build successful: $EXECUTABLE"
            ls -la dist/
            
            # Get file size
            if [ "${{ matrix.os }}" = "windows-latest" ]; then
              powershell -Command "(Get-Item '$EXECUTABLE').length"
            else
              stat -c%s "$EXECUTABLE"
            fi
          else
            echo "❌ Build failed: executable not found"
            exit 1
          fi
        shell: bash

      - name: 🧪 Basic Functionality Test
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "Windows executable test completed"
          else
            chmod +x dist/VulcanGPT-Test
            echo "Unix executable test completed"
          fi
        shell: bash

  lint-and-format:
    name: 🧹 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Linting Tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: 🔍 Run Flake8
        run: |
          flake8 Vulcan-GPT/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 Vulcan-GPT/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Check Code Formatting
        run: |
          black --check --diff Vulcan-GPT/
          isort --check-only --diff Vulcan-GPT/

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🛡️ Run Bandit Security Scan
        run: |
          bandit -r Vulcan-GPT/ -f json -o bandit-report.json || true
          bandit -r Vulcan-GPT/

      - name: 🔍 Check Dependencies for Vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

  build-summary:
    name: 📊 Build Summary
    needs: [test-build, lint-and-format, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📋 Build Results
        run: |
          echo "## 🏗️ Build Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-build.result }}" = "success" ]; then
            echo "✅ **Executable Builds**: All platforms successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Executable Builds**: Failed on one or more platforms" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.lint-and-format.result }}" = "success" ]; then
            echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **Security Scan**: No issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan**: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- If all checks pass, you're ready to create a release" >> $GITHUB_STEP_SUMMARY
          echo "- Create a git tag to trigger the release workflow: \`git tag v1.0.0 && git push origin v1.0.0\`" >> $GITHUB_STEP_SUMMARY
