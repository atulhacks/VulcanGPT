name: Automated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r Vulcan-GPT/ -f json -o bandit-report.json || true
          bandit -r Vulcan-GPT/ -f txt

      - name: Check for high/medium severity issues
        run: |
          python -c "
          import json
          with open('bandit-report.json', 'r') as f:
              report = json.load(f)
          
          high_issues = report['metrics']['_totals']['SEVERITY.HIGH']
          medium_issues = report['metrics']['_totals']['SEVERITY.MEDIUM']
          
          print(f'High severity issues: {high_issues}')
          print(f'Medium severity issues: {medium_issues}')
          
          if high_issues > 0 or medium_issues > 0:
              print('‚ùå Security scan failed: High or medium severity issues found')
              exit(1)
          else:
              print('‚úÖ Security scan passed: No high or medium severity issues')
          "

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: bandit-report.json

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install flake8 black isort

      - name: Check code formatting with Black
        run: |
          black --check --diff Vulcan-GPT/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff Vulcan-GPT/

      - name: Lint with flake8
        run: |
          flake8 Vulcan-GPT/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 Vulcan-GPT/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Vulcan-GPT/requirements.txt

      - name: Test import and basic functionality
        run: |
          python -c "
          import sys
          sys.path.append('Vulcan-GPT')
          
          # Test imports
          try:
              import VulcanGPT
              print('‚úÖ Main module imports successfully')
          except Exception as e:
              print(f'‚ùå Main module import failed: {e}')
              sys.exit(1)
          
          try:
              import local_models
              print('‚úÖ Local models module imports successfully')
          except Exception as e:
              print(f'‚ùå Local models import failed: {e}')
              sys.exit(1)
          
          print('‚úÖ All basic tests passed')
          "

  build:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: [security-scan, code-quality, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          pip install pyinstaller

      - name: Install project dependencies
        run: |
          pip install -r Vulcan-GPT/requirements.txt

      - name: Build executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd Vulcan-GPT
          pyinstaller --onefile --name VulcanGPT-windows --add-data "prompts;prompts" --add-data "img;img" VulcanGPT.py

      - name: Build executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd Vulcan-GPT
          pyinstaller --onefile --name VulcanGPT-linux --add-data "prompts:prompts" --add-data "img:img" VulcanGPT.py

      - name: Build executable (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd Vulcan-GPT
          pyinstaller --onefile --name VulcanGPT-macos --add-data "prompts:prompts" --add-data "img:img" VulcanGPT.py

      - name: Create source archive
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czf VulcanGPT-source.tar.gz Vulcan-GPT/ VulcanGPT-Web/ *.md *.bat *.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}
          path: |
            Vulcan-GPT/dist/
            VulcanGPT-source.tar.gz

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag (excluding the current one if it exists)
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.version.outputs.version }}" | head -n 1)
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "## What's New" > CHANGELOG.md
            echo "This is the first release of VulcanGPT!" >> CHANGELOG.md
          else
            echo "## What's New" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## Security" >> CHANGELOG.md
          echo "‚úÖ All security scans passed" >> CHANGELOG.md
          echo "‚úÖ No high or medium severity vulnerabilities" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## Compatibility" >> CHANGELOG.md
          echo "- Python 3.8+" >> CHANGELOG.md
          echo "- Windows, macOS, Linux" >> CHANGELOG.md
          echo "- Standalone executables available" >> CHANGELOG.md

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy executables
          cp build-windows-latest/Vulcan-GPT/dist/* release-assets/ 2>/dev/null || true
          cp build-ubuntu-latest/Vulcan-GPT/dist/* release-assets/ 2>/dev/null || true
          cp build-macos-latest/Vulcan-GPT/dist/* release-assets/ 2>/dev/null || true
          
          # Copy source archive
          cp build-ubuntu-latest/VulcanGPT-source.tar.gz release-assets/ 2>/dev/null || true
          
          # Create checksums
          cd release-assets
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.txt
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: VulcanGPT ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          files: release-assets/*
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.create-release.outputs.version || github.ref_name }} created successfully!"
          echo "üì¶ Assets built for Windows, macOS, and Linux"
          echo "üîí Security scans passed"
          echo "‚úÖ All tests passed"

      - name: Notify on failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Please check the workflow logs for details."
          exit 1

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.create-release.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest release
        run: |
          VERSION="${{ needs.create-release.outputs.version || github.ref_name }}"
          
          # Update download links in README
          sed -i "s/releases\/download\/v[0-9]\+\.[0-9]\+\.[0-9]\+/releases\/download\/$VERSION/g" README.md
          
          # Update version badge
          sed -i "s/release-v[0-9]\+\.[0-9]\+\.[0-9]\+-/release-$VERSION-/g" README.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update README with release ${{ needs.create-release.outputs.version || github.ref_name }}"
          git push
